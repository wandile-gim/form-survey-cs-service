// Code generated by ent, DO NOT EDIT.

package taskrecord

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the taskrecord type in the database.
	Label = "task_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeTaskLogs holds the string denoting the task_logs edge name in mutations.
	EdgeTaskLogs = "task_logs"
	// Table holds the table name of the taskrecord in the database.
	Table = "task_records"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "task_records"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_task_record"
	// TaskLogsTable is the table that holds the task_logs relation/edge. The primary key declared below.
	TaskLogsTable = "task_record_task_logs"
	// TaskLogsInverseTable is the table name for the TaskLog entity.
	// It exists in this package in order to avoid circular dependency with the "tasklog" package.
	TaskLogsInverseTable = "task_logs"
)

// Columns holds all SQL columns for taskrecord fields.
var Columns = []string{
	FieldID,
	FieldState,
	FieldRetryCount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "task_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_task_record",
}

var (
	// TaskLogsPrimaryKey and TaskLogsColumn2 are the table columns denoting the
	// primary key for the task_logs relation (M2M).
	TaskLogsPrimaryKey = []string{"task_record_id", "task_log_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState string
	// DefaultRetryCount holds the default value on creation for the "retry_count" field.
	DefaultRetryCount int
)

// OrderOption defines the ordering options for the TaskRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskLogsCount orders the results by task_logs count.
func ByTaskLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskLogsStep(), opts...)
	}
}

// ByTaskLogs orders the results by task_logs terms.
func ByTaskLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TaskTable, TaskColumn),
	)
}
func newTaskLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TaskLogsTable, TaskLogsPrimaryKey...),
	)
}
