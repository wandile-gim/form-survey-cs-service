// Code generated by ent, DO NOT EDIT.

package taskrecord

import (
	"form-survey-cs-service/internal/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldLTE(FieldID, id))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldEQ(FieldState, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldEQ(FieldRetryCount, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldContainsFold(FieldState, v))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.TaskRecord {
	return predicate.TaskRecord(sql.FieldLTE(FieldRetryCount, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.TaskRecord {
	return predicate.TaskRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.TaskRecord {
	return predicate.TaskRecord(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskLogs applies the HasEdge predicate on the "task_logs" edge.
func HasTaskLogs() predicate.TaskRecord {
	return predicate.TaskRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaskLogsTable, TaskLogsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskLogsWith applies the HasEdge predicate on the "task_logs" edge with a given conditions (other predicates).
func HasTaskLogsWith(preds ...predicate.TaskLog) predicate.TaskRecord {
	return predicate.TaskRecord(func(s *sql.Selector) {
		step := newTaskLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskRecord) predicate.TaskRecord {
	return predicate.TaskRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskRecord) predicate.TaskRecord {
	return predicate.TaskRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskRecord) predicate.TaskRecord {
	return predicate.TaskRecord(sql.NotPredicates(p))
}
