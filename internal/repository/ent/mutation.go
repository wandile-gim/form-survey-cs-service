// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"form-survey-cs-service/internal/repository/ent/predicate"
	"form-survey-cs-service/internal/repository/ent/task"
	"form-survey-cs-service/internal/repository/ent/tasklog"
	"form-survey-cs-service/internal/repository/ent/taskrecord"
	"form-survey-cs-service/internal/repository/ent/tracker"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTask       = "Task"
	TypeTaskLog    = "TaskLog"
	TypeTaskRecord = "TaskRecord"
	TypeTracker    = "Tracker"
)

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_type              *string
	row_num            *int
	addrow_num         *int
	name               *string
	phone              *string
	group              *string
	corps              *string
	food               *string
	gender             *string
	generation         *string
	region             *string
	registered_at      *time.Time
	clearedFields      map[string]struct{}
	task_record        *int
	clearedtask_record bool
	done               bool
	oldValue           func(context.Context) (*Task, error)
	predicates         []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *TaskMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TaskMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *TaskMutation) ClearType() {
	m._type = nil
	m.clearedFields[task.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *TaskMutation) TypeCleared() bool {
	_, ok := m.clearedFields[task.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *TaskMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, task.FieldType)
}

// SetRowNum sets the "row_num" field.
func (m *TaskMutation) SetRowNum(i int) {
	m.row_num = &i
	m.addrow_num = nil
}

// RowNum returns the value of the "row_num" field in the mutation.
func (m *TaskMutation) RowNum() (r int, exists bool) {
	v := m.row_num
	if v == nil {
		return
	}
	return *v, true
}

// OldRowNum returns the old "row_num" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldRowNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowNum: %w", err)
	}
	return oldValue.RowNum, nil
}

// AddRowNum adds i to the "row_num" field.
func (m *TaskMutation) AddRowNum(i int) {
	if m.addrow_num != nil {
		*m.addrow_num += i
	} else {
		m.addrow_num = &i
	}
}

// AddedRowNum returns the value that was added to the "row_num" field in this mutation.
func (m *TaskMutation) AddedRowNum() (r int, exists bool) {
	v := m.addrow_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetRowNum resets all changes to the "row_num" field.
func (m *TaskMutation) ResetRowNum() {
	m.row_num = nil
	m.addrow_num = nil
}

// SetName sets the "name" field.
func (m *TaskMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskMutation) ResetName() {
	m.name = nil
}

// SetPhone sets the "phone" field.
func (m *TaskMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *TaskMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *TaskMutation) ResetPhone() {
	m.phone = nil
}

// SetGroup sets the "group" field.
func (m *TaskMutation) SetGroup(s string) {
	m.group = &s
}

// Group returns the value of the "group" field in the mutation.
func (m *TaskMutation) Group() (r string, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroup returns the old "group" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldGroup(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroup: %w", err)
	}
	return oldValue.Group, nil
}

// ResetGroup resets all changes to the "group" field.
func (m *TaskMutation) ResetGroup() {
	m.group = nil
}

// SetCorps sets the "corps" field.
func (m *TaskMutation) SetCorps(s string) {
	m.corps = &s
}

// Corps returns the value of the "corps" field in the mutation.
func (m *TaskMutation) Corps() (r string, exists bool) {
	v := m.corps
	if v == nil {
		return
	}
	return *v, true
}

// OldCorps returns the old "corps" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCorps(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCorps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCorps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCorps: %w", err)
	}
	return oldValue.Corps, nil
}

// ClearCorps clears the value of the "corps" field.
func (m *TaskMutation) ClearCorps() {
	m.corps = nil
	m.clearedFields[task.FieldCorps] = struct{}{}
}

// CorpsCleared returns if the "corps" field was cleared in this mutation.
func (m *TaskMutation) CorpsCleared() bool {
	_, ok := m.clearedFields[task.FieldCorps]
	return ok
}

// ResetCorps resets all changes to the "corps" field.
func (m *TaskMutation) ResetCorps() {
	m.corps = nil
	delete(m.clearedFields, task.FieldCorps)
}

// SetFood sets the "food" field.
func (m *TaskMutation) SetFood(s string) {
	m.food = &s
}

// Food returns the value of the "food" field in the mutation.
func (m *TaskMutation) Food() (r string, exists bool) {
	v := m.food
	if v == nil {
		return
	}
	return *v, true
}

// OldFood returns the old "food" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldFood(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFood is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFood requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFood: %w", err)
	}
	return oldValue.Food, nil
}

// ClearFood clears the value of the "food" field.
func (m *TaskMutation) ClearFood() {
	m.food = nil
	m.clearedFields[task.FieldFood] = struct{}{}
}

// FoodCleared returns if the "food" field was cleared in this mutation.
func (m *TaskMutation) FoodCleared() bool {
	_, ok := m.clearedFields[task.FieldFood]
	return ok
}

// ResetFood resets all changes to the "food" field.
func (m *TaskMutation) ResetFood() {
	m.food = nil
	delete(m.clearedFields, task.FieldFood)
}

// SetGender sets the "gender" field.
func (m *TaskMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *TaskMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of the "gender" field.
func (m *TaskMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[task.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *TaskMutation) GenderCleared() bool {
	_, ok := m.clearedFields[task.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *TaskMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, task.FieldGender)
}

// SetGeneration sets the "generation" field.
func (m *TaskMutation) SetGeneration(s string) {
	m.generation = &s
}

// Generation returns the value of the "generation" field in the mutation.
func (m *TaskMutation) Generation() (r string, exists bool) {
	v := m.generation
	if v == nil {
		return
	}
	return *v, true
}

// OldGeneration returns the old "generation" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldGeneration(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGeneration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGeneration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGeneration: %w", err)
	}
	return oldValue.Generation, nil
}

// ClearGeneration clears the value of the "generation" field.
func (m *TaskMutation) ClearGeneration() {
	m.generation = nil
	m.clearedFields[task.FieldGeneration] = struct{}{}
}

// GenerationCleared returns if the "generation" field was cleared in this mutation.
func (m *TaskMutation) GenerationCleared() bool {
	_, ok := m.clearedFields[task.FieldGeneration]
	return ok
}

// ResetGeneration resets all changes to the "generation" field.
func (m *TaskMutation) ResetGeneration() {
	m.generation = nil
	delete(m.clearedFields, task.FieldGeneration)
}

// SetRegion sets the "region" field.
func (m *TaskMutation) SetRegion(s string) {
	m.region = &s
}

// Region returns the value of the "region" field in the mutation.
func (m *TaskMutation) Region() (r string, exists bool) {
	v := m.region
	if v == nil {
		return
	}
	return *v, true
}

// OldRegion returns the old "region" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegion: %w", err)
	}
	return oldValue.Region, nil
}

// ResetRegion resets all changes to the "region" field.
func (m *TaskMutation) ResetRegion() {
	m.region = nil
}

// SetRegisteredAt sets the "registered_at" field.
func (m *TaskMutation) SetRegisteredAt(t time.Time) {
	m.registered_at = &t
}

// RegisteredAt returns the value of the "registered_at" field in the mutation.
func (m *TaskMutation) RegisteredAt() (r time.Time, exists bool) {
	v := m.registered_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisteredAt returns the old "registered_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldRegisteredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegisteredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegisteredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisteredAt: %w", err)
	}
	return oldValue.RegisteredAt, nil
}

// ClearRegisteredAt clears the value of the "registered_at" field.
func (m *TaskMutation) ClearRegisteredAt() {
	m.registered_at = nil
	m.clearedFields[task.FieldRegisteredAt] = struct{}{}
}

// RegisteredAtCleared returns if the "registered_at" field was cleared in this mutation.
func (m *TaskMutation) RegisteredAtCleared() bool {
	_, ok := m.clearedFields[task.FieldRegisteredAt]
	return ok
}

// ResetRegisteredAt resets all changes to the "registered_at" field.
func (m *TaskMutation) ResetRegisteredAt() {
	m.registered_at = nil
	delete(m.clearedFields, task.FieldRegisteredAt)
}

// SetTaskRecordID sets the "task_record" edge to the TaskRecord entity by id.
func (m *TaskMutation) SetTaskRecordID(id int) {
	m.task_record = &id
}

// ClearTaskRecord clears the "task_record" edge to the TaskRecord entity.
func (m *TaskMutation) ClearTaskRecord() {
	m.clearedtask_record = true
}

// TaskRecordCleared reports if the "task_record" edge to the TaskRecord entity was cleared.
func (m *TaskMutation) TaskRecordCleared() bool {
	return m.clearedtask_record
}

// TaskRecordID returns the "task_record" edge ID in the mutation.
func (m *TaskMutation) TaskRecordID() (id int, exists bool) {
	if m.task_record != nil {
		return *m.task_record, true
	}
	return
}

// TaskRecordIDs returns the "task_record" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskRecordID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) TaskRecordIDs() (ids []int) {
	if id := m.task_record; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskRecord resets all changes to the "task_record" edge.
func (m *TaskMutation) ResetTaskRecord() {
	m.task_record = nil
	m.clearedtask_record = false
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m._type != nil {
		fields = append(fields, task.FieldType)
	}
	if m.row_num != nil {
		fields = append(fields, task.FieldRowNum)
	}
	if m.name != nil {
		fields = append(fields, task.FieldName)
	}
	if m.phone != nil {
		fields = append(fields, task.FieldPhone)
	}
	if m.group != nil {
		fields = append(fields, task.FieldGroup)
	}
	if m.corps != nil {
		fields = append(fields, task.FieldCorps)
	}
	if m.food != nil {
		fields = append(fields, task.FieldFood)
	}
	if m.gender != nil {
		fields = append(fields, task.FieldGender)
	}
	if m.generation != nil {
		fields = append(fields, task.FieldGeneration)
	}
	if m.region != nil {
		fields = append(fields, task.FieldRegion)
	}
	if m.registered_at != nil {
		fields = append(fields, task.FieldRegisteredAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldType:
		return m.GetType()
	case task.FieldRowNum:
		return m.RowNum()
	case task.FieldName:
		return m.Name()
	case task.FieldPhone:
		return m.Phone()
	case task.FieldGroup:
		return m.Group()
	case task.FieldCorps:
		return m.Corps()
	case task.FieldFood:
		return m.Food()
	case task.FieldGender:
		return m.Gender()
	case task.FieldGeneration:
		return m.Generation()
	case task.FieldRegion:
		return m.Region()
	case task.FieldRegisteredAt:
		return m.RegisteredAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldType:
		return m.OldType(ctx)
	case task.FieldRowNum:
		return m.OldRowNum(ctx)
	case task.FieldName:
		return m.OldName(ctx)
	case task.FieldPhone:
		return m.OldPhone(ctx)
	case task.FieldGroup:
		return m.OldGroup(ctx)
	case task.FieldCorps:
		return m.OldCorps(ctx)
	case task.FieldFood:
		return m.OldFood(ctx)
	case task.FieldGender:
		return m.OldGender(ctx)
	case task.FieldGeneration:
		return m.OldGeneration(ctx)
	case task.FieldRegion:
		return m.OldRegion(ctx)
	case task.FieldRegisteredAt:
		return m.OldRegisteredAt(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case task.FieldRowNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowNum(v)
		return nil
	case task.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case task.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case task.FieldGroup:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroup(v)
		return nil
	case task.FieldCorps:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCorps(v)
		return nil
	case task.FieldFood:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFood(v)
		return nil
	case task.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case task.FieldGeneration:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGeneration(v)
		return nil
	case task.FieldRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegion(v)
		return nil
	case task.FieldRegisteredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisteredAt(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addrow_num != nil {
		fields = append(fields, task.FieldRowNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldRowNum:
		return m.AddedRowNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldRowNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRowNum(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldType) {
		fields = append(fields, task.FieldType)
	}
	if m.FieldCleared(task.FieldCorps) {
		fields = append(fields, task.FieldCorps)
	}
	if m.FieldCleared(task.FieldFood) {
		fields = append(fields, task.FieldFood)
	}
	if m.FieldCleared(task.FieldGender) {
		fields = append(fields, task.FieldGender)
	}
	if m.FieldCleared(task.FieldGeneration) {
		fields = append(fields, task.FieldGeneration)
	}
	if m.FieldCleared(task.FieldRegisteredAt) {
		fields = append(fields, task.FieldRegisteredAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldType:
		m.ClearType()
		return nil
	case task.FieldCorps:
		m.ClearCorps()
		return nil
	case task.FieldFood:
		m.ClearFood()
		return nil
	case task.FieldGender:
		m.ClearGender()
		return nil
	case task.FieldGeneration:
		m.ClearGeneration()
		return nil
	case task.FieldRegisteredAt:
		m.ClearRegisteredAt()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldType:
		m.ResetType()
		return nil
	case task.FieldRowNum:
		m.ResetRowNum()
		return nil
	case task.FieldName:
		m.ResetName()
		return nil
	case task.FieldPhone:
		m.ResetPhone()
		return nil
	case task.FieldGroup:
		m.ResetGroup()
		return nil
	case task.FieldCorps:
		m.ResetCorps()
		return nil
	case task.FieldFood:
		m.ResetFood()
		return nil
	case task.FieldGender:
		m.ResetGender()
		return nil
	case task.FieldGeneration:
		m.ResetGeneration()
		return nil
	case task.FieldRegion:
		m.ResetRegion()
		return nil
	case task.FieldRegisteredAt:
		m.ResetRegisteredAt()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.task_record != nil {
		edges = append(edges, task.EdgeTaskRecord)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeTaskRecord:
		if id := m.task_record; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtask_record {
		edges = append(edges, task.EdgeTaskRecord)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeTaskRecord:
		return m.clearedtask_record
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeTaskRecord:
		m.ClearTaskRecord()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeTaskRecord:
		m.ResetTaskRecord()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// TaskLogMutation represents an operation that mutates the TaskLog nodes in the graph.
type TaskLogMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	message             *string
	clearedFields       map[string]struct{}
	task_records        map[int]struct{}
	removedtask_records map[int]struct{}
	clearedtask_records bool
	done                bool
	oldValue            func(context.Context) (*TaskLog, error)
	predicates          []predicate.TaskLog
}

var _ ent.Mutation = (*TaskLogMutation)(nil)

// tasklogOption allows management of the mutation configuration using functional options.
type tasklogOption func(*TaskLogMutation)

// newTaskLogMutation creates new mutation for the TaskLog entity.
func newTaskLogMutation(c config, op Op, opts ...tasklogOption) *TaskLogMutation {
	m := &TaskLogMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskLogID sets the ID field of the mutation.
func withTaskLogID(id int) tasklogOption {
	return func(m *TaskLogMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskLog
		)
		m.oldValue = func(ctx context.Context) (*TaskLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskLog sets the old TaskLog of the mutation.
func withTaskLog(node *TaskLog) tasklogOption {
	return func(m *TaskLogMutation) {
		m.oldValue = func(context.Context) (*TaskLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskLog entities.
func (m *TaskLogMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *TaskLogMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *TaskLogMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the TaskLog entity.
// If the TaskLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskLogMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *TaskLogMutation) ResetMessage() {
	m.message = nil
}

// AddTaskRecordIDs adds the "task_records" edge to the TaskRecord entity by ids.
func (m *TaskLogMutation) AddTaskRecordIDs(ids ...int) {
	if m.task_records == nil {
		m.task_records = make(map[int]struct{})
	}
	for i := range ids {
		m.task_records[ids[i]] = struct{}{}
	}
}

// ClearTaskRecords clears the "task_records" edge to the TaskRecord entity.
func (m *TaskLogMutation) ClearTaskRecords() {
	m.clearedtask_records = true
}

// TaskRecordsCleared reports if the "task_records" edge to the TaskRecord entity was cleared.
func (m *TaskLogMutation) TaskRecordsCleared() bool {
	return m.clearedtask_records
}

// RemoveTaskRecordIDs removes the "task_records" edge to the TaskRecord entity by IDs.
func (m *TaskLogMutation) RemoveTaskRecordIDs(ids ...int) {
	if m.removedtask_records == nil {
		m.removedtask_records = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.task_records, ids[i])
		m.removedtask_records[ids[i]] = struct{}{}
	}
}

// RemovedTaskRecords returns the removed IDs of the "task_records" edge to the TaskRecord entity.
func (m *TaskLogMutation) RemovedTaskRecordsIDs() (ids []int) {
	for id := range m.removedtask_records {
		ids = append(ids, id)
	}
	return
}

// TaskRecordsIDs returns the "task_records" edge IDs in the mutation.
func (m *TaskLogMutation) TaskRecordsIDs() (ids []int) {
	for id := range m.task_records {
		ids = append(ids, id)
	}
	return
}

// ResetTaskRecords resets all changes to the "task_records" edge.
func (m *TaskLogMutation) ResetTaskRecords() {
	m.task_records = nil
	m.clearedtask_records = false
	m.removedtask_records = nil
}

// Where appends a list predicates to the TaskLogMutation builder.
func (m *TaskLogMutation) Where(ps ...predicate.TaskLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TaskLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TaskLog).
func (m *TaskLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskLogMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.message != nil {
		fields = append(fields, tasklog.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tasklog.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tasklog.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown TaskLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tasklog.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown TaskLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaskLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskLogMutation) ResetField(name string) error {
	switch name {
	case tasklog.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown TaskLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.task_records != nil {
		edges = append(edges, tasklog.EdgeTaskRecords)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tasklog.EdgeTaskRecords:
		ids := make([]ent.Value, 0, len(m.task_records))
		for id := range m.task_records {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtask_records != nil {
		edges = append(edges, tasklog.EdgeTaskRecords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tasklog.EdgeTaskRecords:
		ids := make([]ent.Value, 0, len(m.removedtask_records))
		for id := range m.removedtask_records {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtask_records {
		edges = append(edges, tasklog.EdgeTaskRecords)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskLogMutation) EdgeCleared(name string) bool {
	switch name {
	case tasklog.EdgeTaskRecords:
		return m.clearedtask_records
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskLogMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskLogMutation) ResetEdge(name string) error {
	switch name {
	case tasklog.EdgeTaskRecords:
		m.ResetTaskRecords()
		return nil
	}
	return fmt.Errorf("unknown TaskLog edge %s", name)
}

// TaskRecordMutation represents an operation that mutates the TaskRecord nodes in the graph.
type TaskRecordMutation struct {
	config
	op               Op
	typ              string
	id               *int
	state            *string
	retry_count      *int
	addretry_count   *int
	clearedFields    map[string]struct{}
	task             *int
	clearedtask      bool
	task_logs        map[int]struct{}
	removedtask_logs map[int]struct{}
	clearedtask_logs bool
	done             bool
	oldValue         func(context.Context) (*TaskRecord, error)
	predicates       []predicate.TaskRecord
}

var _ ent.Mutation = (*TaskRecordMutation)(nil)

// taskrecordOption allows management of the mutation configuration using functional options.
type taskrecordOption func(*TaskRecordMutation)

// newTaskRecordMutation creates new mutation for the TaskRecord entity.
func newTaskRecordMutation(c config, op Op, opts ...taskrecordOption) *TaskRecordMutation {
	m := &TaskRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskRecordID sets the ID field of the mutation.
func withTaskRecordID(id int) taskrecordOption {
	return func(m *TaskRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskRecord
		)
		m.oldValue = func(ctx context.Context) (*TaskRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskRecord sets the old TaskRecord of the mutation.
func withTaskRecord(node *TaskRecord) taskrecordOption {
	return func(m *TaskRecordMutation) {
		m.oldValue = func(context.Context) (*TaskRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskRecord entities.
func (m *TaskRecordMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskRecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskRecordMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetState sets the "state" field.
func (m *TaskRecordMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *TaskRecordMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the TaskRecord entity.
// If the TaskRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskRecordMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *TaskRecordMutation) ResetState() {
	m.state = nil
}

// SetRetryCount sets the "retry_count" field.
func (m *TaskRecordMutation) SetRetryCount(i int) {
	m.retry_count = &i
	m.addretry_count = nil
}

// RetryCount returns the value of the "retry_count" field in the mutation.
func (m *TaskRecordMutation) RetryCount() (r int, exists bool) {
	v := m.retry_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryCount returns the old "retry_count" field's value of the TaskRecord entity.
// If the TaskRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskRecordMutation) OldRetryCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryCount: %w", err)
	}
	return oldValue.RetryCount, nil
}

// AddRetryCount adds i to the "retry_count" field.
func (m *TaskRecordMutation) AddRetryCount(i int) {
	if m.addretry_count != nil {
		*m.addretry_count += i
	} else {
		m.addretry_count = &i
	}
}

// AddedRetryCount returns the value that was added to the "retry_count" field in this mutation.
func (m *TaskRecordMutation) AddedRetryCount() (r int, exists bool) {
	v := m.addretry_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetryCount resets all changes to the "retry_count" field.
func (m *TaskRecordMutation) ResetRetryCount() {
	m.retry_count = nil
	m.addretry_count = nil
}

// SetTaskID sets the "task" edge to the Task entity by id.
func (m *TaskRecordMutation) SetTaskID(id int) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Task entity.
func (m *TaskRecordMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *TaskRecordMutation) TaskCleared() bool {
	return m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *TaskRecordMutation) TaskID() (id int, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *TaskRecordMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *TaskRecordMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// AddTaskLogIDs adds the "task_logs" edge to the TaskLog entity by ids.
func (m *TaskRecordMutation) AddTaskLogIDs(ids ...int) {
	if m.task_logs == nil {
		m.task_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.task_logs[ids[i]] = struct{}{}
	}
}

// ClearTaskLogs clears the "task_logs" edge to the TaskLog entity.
func (m *TaskRecordMutation) ClearTaskLogs() {
	m.clearedtask_logs = true
}

// TaskLogsCleared reports if the "task_logs" edge to the TaskLog entity was cleared.
func (m *TaskRecordMutation) TaskLogsCleared() bool {
	return m.clearedtask_logs
}

// RemoveTaskLogIDs removes the "task_logs" edge to the TaskLog entity by IDs.
func (m *TaskRecordMutation) RemoveTaskLogIDs(ids ...int) {
	if m.removedtask_logs == nil {
		m.removedtask_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.task_logs, ids[i])
		m.removedtask_logs[ids[i]] = struct{}{}
	}
}

// RemovedTaskLogs returns the removed IDs of the "task_logs" edge to the TaskLog entity.
func (m *TaskRecordMutation) RemovedTaskLogsIDs() (ids []int) {
	for id := range m.removedtask_logs {
		ids = append(ids, id)
	}
	return
}

// TaskLogsIDs returns the "task_logs" edge IDs in the mutation.
func (m *TaskRecordMutation) TaskLogsIDs() (ids []int) {
	for id := range m.task_logs {
		ids = append(ids, id)
	}
	return
}

// ResetTaskLogs resets all changes to the "task_logs" edge.
func (m *TaskRecordMutation) ResetTaskLogs() {
	m.task_logs = nil
	m.clearedtask_logs = false
	m.removedtask_logs = nil
}

// Where appends a list predicates to the TaskRecordMutation builder.
func (m *TaskRecordMutation) Where(ps ...predicate.TaskRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TaskRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TaskRecord).
func (m *TaskRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskRecordMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.state != nil {
		fields = append(fields, taskrecord.FieldState)
	}
	if m.retry_count != nil {
		fields = append(fields, taskrecord.FieldRetryCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskrecord.FieldState:
		return m.State()
	case taskrecord.FieldRetryCount:
		return m.RetryCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskrecord.FieldState:
		return m.OldState(ctx)
	case taskrecord.FieldRetryCount:
		return m.OldRetryCount(ctx)
	}
	return nil, fmt.Errorf("unknown TaskRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskrecord.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case taskrecord.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryCount(v)
		return nil
	}
	return fmt.Errorf("unknown TaskRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskRecordMutation) AddedFields() []string {
	var fields []string
	if m.addretry_count != nil {
		fields = append(fields, taskrecord.FieldRetryCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taskrecord.FieldRetryCount:
		return m.AddedRetryCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taskrecord.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetryCount(v)
		return nil
	}
	return fmt.Errorf("unknown TaskRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskRecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskRecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaskRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskRecordMutation) ResetField(name string) error {
	switch name {
	case taskrecord.FieldState:
		m.ResetState()
		return nil
	case taskrecord.FieldRetryCount:
		m.ResetRetryCount()
		return nil
	}
	return fmt.Errorf("unknown TaskRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.task != nil {
		edges = append(edges, taskrecord.EdgeTask)
	}
	if m.task_logs != nil {
		edges = append(edges, taskrecord.EdgeTaskLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskRecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case taskrecord.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	case taskrecord.EdgeTaskLogs:
		ids := make([]ent.Value, 0, len(m.task_logs))
		for id := range m.task_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtask_logs != nil {
		edges = append(edges, taskrecord.EdgeTaskLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskRecordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case taskrecord.EdgeTaskLogs:
		ids := make([]ent.Value, 0, len(m.removedtask_logs))
		for id := range m.removedtask_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtask {
		edges = append(edges, taskrecord.EdgeTask)
	}
	if m.clearedtask_logs {
		edges = append(edges, taskrecord.EdgeTaskLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskRecordMutation) EdgeCleared(name string) bool {
	switch name {
	case taskrecord.EdgeTask:
		return m.clearedtask
	case taskrecord.EdgeTaskLogs:
		return m.clearedtask_logs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskRecordMutation) ClearEdge(name string) error {
	switch name {
	case taskrecord.EdgeTask:
		m.ClearTask()
		return nil
	}
	return fmt.Errorf("unknown TaskRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskRecordMutation) ResetEdge(name string) error {
	switch name {
	case taskrecord.EdgeTask:
		m.ResetTask()
		return nil
	case taskrecord.EdgeTaskLogs:
		m.ResetTaskLogs()
		return nil
	}
	return fmt.Errorf("unknown TaskRecord edge %s", name)
}

// TrackerMutation represents an operation that mutates the Tracker nodes in the graph.
type TrackerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	service       *tracker.Service
	last_one      *time.Time
	version       *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Tracker, error)
	predicates    []predicate.Tracker
}

var _ ent.Mutation = (*TrackerMutation)(nil)

// trackerOption allows management of the mutation configuration using functional options.
type trackerOption func(*TrackerMutation)

// newTrackerMutation creates new mutation for the Tracker entity.
func newTrackerMutation(c config, op Op, opts ...trackerOption) *TrackerMutation {
	m := &TrackerMutation{
		config:        c,
		op:            op,
		typ:           TypeTracker,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrackerID sets the ID field of the mutation.
func withTrackerID(id int) trackerOption {
	return func(m *TrackerMutation) {
		var (
			err   error
			once  sync.Once
			value *Tracker
		)
		m.oldValue = func(ctx context.Context) (*Tracker, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tracker.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTracker sets the old Tracker of the mutation.
func withTracker(node *Tracker) trackerOption {
	return func(m *TrackerMutation) {
		m.oldValue = func(context.Context) (*Tracker, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrackerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrackerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrackerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrackerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tracker.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetService sets the "service" field.
func (m *TrackerMutation) SetService(t tracker.Service) {
	m.service = &t
}

// Service returns the value of the "service" field in the mutation.
func (m *TrackerMutation) Service() (r tracker.Service, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldService returns the old "service" field's value of the Tracker entity.
// If the Tracker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackerMutation) OldService(ctx context.Context) (v tracker.Service, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldService is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldService requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldService: %w", err)
	}
	return oldValue.Service, nil
}

// ResetService resets all changes to the "service" field.
func (m *TrackerMutation) ResetService() {
	m.service = nil
}

// SetLastOne sets the "last_one" field.
func (m *TrackerMutation) SetLastOne(t time.Time) {
	m.last_one = &t
}

// LastOne returns the value of the "last_one" field in the mutation.
func (m *TrackerMutation) LastOne() (r time.Time, exists bool) {
	v := m.last_one
	if v == nil {
		return
	}
	return *v, true
}

// OldLastOne returns the old "last_one" field's value of the Tracker entity.
// If the Tracker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackerMutation) OldLastOne(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastOne is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastOne requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastOne: %w", err)
	}
	return oldValue.LastOne, nil
}

// ResetLastOne resets all changes to the "last_one" field.
func (m *TrackerMutation) ResetLastOne() {
	m.last_one = nil
}

// SetVersion sets the "version" field.
func (m *TrackerMutation) SetVersion(t time.Time) {
	m.version = &t
}

// Version returns the value of the "version" field in the mutation.
func (m *TrackerMutation) Version() (r time.Time, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Tracker entity.
// If the Tracker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackerMutation) OldVersion(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *TrackerMutation) ResetVersion() {
	m.version = nil
}

// Where appends a list predicates to the TrackerMutation builder.
func (m *TrackerMutation) Where(ps ...predicate.Tracker) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrackerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrackerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tracker, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrackerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrackerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tracker).
func (m *TrackerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrackerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.service != nil {
		fields = append(fields, tracker.FieldService)
	}
	if m.last_one != nil {
		fields = append(fields, tracker.FieldLastOne)
	}
	if m.version != nil {
		fields = append(fields, tracker.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrackerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tracker.FieldService:
		return m.Service()
	case tracker.FieldLastOne:
		return m.LastOne()
	case tracker.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrackerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tracker.FieldService:
		return m.OldService(ctx)
	case tracker.FieldLastOne:
		return m.OldLastOne(ctx)
	case tracker.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown Tracker field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tracker.FieldService:
		v, ok := value.(tracker.Service)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetService(v)
		return nil
	case tracker.FieldLastOne:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastOne(v)
		return nil
	case tracker.FieldVersion:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Tracker field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrackerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrackerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tracker numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrackerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrackerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrackerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tracker nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrackerMutation) ResetField(name string) error {
	switch name {
	case tracker.FieldService:
		m.ResetService()
		return nil
	case tracker.FieldLastOne:
		m.ResetLastOne()
		return nil
	case tracker.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown Tracker field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrackerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrackerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrackerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrackerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrackerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrackerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrackerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tracker unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrackerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tracker edge %s", name)
}
