// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"form-survey-cs-service/internal/repository/ent/tracker"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tracker is the model entity for the Tracker schema.
type Tracker struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Service holds the value of the "service" field.
	Service tracker.Service `json:"service,omitempty"`
	// LastOne holds the value of the "last_one" field.
	LastOne time.Time `json:"last_one,omitempty"`
	// Version holds the value of the "version" field.
	Version      time.Time `json:"version,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tracker) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tracker.FieldID:
			values[i] = new(sql.NullInt64)
		case tracker.FieldService:
			values[i] = new(sql.NullString)
		case tracker.FieldLastOne, tracker.FieldVersion:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tracker fields.
func (t *Tracker) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tracker.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tracker.FieldService:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service", values[i])
			} else if value.Valid {
				t.Service = tracker.Service(value.String)
			}
		case tracker.FieldLastOne:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_one", values[i])
			} else if value.Valid {
				t.LastOne = value.Time
			}
		case tracker.FieldVersion:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				t.Version = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tracker.
// This includes values selected through modifiers, order, etc.
func (t *Tracker) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Tracker.
// Note that you need to call Tracker.Unwrap() before calling this method if this Tracker
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tracker) Update() *TrackerUpdateOne {
	return NewTrackerClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tracker entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tracker) Unwrap() *Tracker {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tracker is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tracker) String() string {
	var builder strings.Builder
	builder.WriteString("Tracker(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("service=")
	builder.WriteString(fmt.Sprintf("%v", t.Service))
	builder.WriteString(", ")
	builder.WriteString("last_one=")
	builder.WriteString(t.LastOne.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(t.Version.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Trackers is a parsable slice of Tracker.
type Trackers []*Tracker
