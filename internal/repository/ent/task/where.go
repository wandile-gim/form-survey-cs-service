// Code generated by ent, DO NOT EDIT.

package task

import (
	"form-survey-cs-service/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldType, v))
}

// RowNum applies equality check predicate on the "row_num" field. It's identical to RowNumEQ.
func RowNum(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRowNum, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPhone, v))
}

// Group applies equality check predicate on the "group" field. It's identical to GroupEQ.
func Group(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldGroup, v))
}

// Corps applies equality check predicate on the "corps" field. It's identical to CorpsEQ.
func Corps(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCorps, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldGender, v))
}

// Generation applies equality check predicate on the "generation" field. It's identical to GenerationEQ.
func Generation(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldGeneration, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegion, v))
}

// RegisteredAt applies equality check predicate on the "registered_at" field. It's identical to RegisteredAtEQ.
func RegisteredAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegisteredAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldType, v))
}

// RowNumEQ applies the EQ predicate on the "row_num" field.
func RowNumEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRowNum, v))
}

// RowNumNEQ applies the NEQ predicate on the "row_num" field.
func RowNumNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRowNum, v))
}

// RowNumIn applies the In predicate on the "row_num" field.
func RowNumIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRowNum, vs...))
}

// RowNumNotIn applies the NotIn predicate on the "row_num" field.
func RowNumNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRowNum, vs...))
}

// RowNumGT applies the GT predicate on the "row_num" field.
func RowNumGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRowNum, v))
}

// RowNumGTE applies the GTE predicate on the "row_num" field.
func RowNumGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRowNum, v))
}

// RowNumLT applies the LT predicate on the "row_num" field.
func RowNumLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRowNum, v))
}

// RowNumLTE applies the LTE predicate on the "row_num" field.
func RowNumLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRowNum, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldName, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldPhone, v))
}

// GroupEQ applies the EQ predicate on the "group" field.
func GroupEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldGroup, v))
}

// GroupNEQ applies the NEQ predicate on the "group" field.
func GroupNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldGroup, v))
}

// GroupIn applies the In predicate on the "group" field.
func GroupIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldGroup, vs...))
}

// GroupNotIn applies the NotIn predicate on the "group" field.
func GroupNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldGroup, vs...))
}

// GroupGT applies the GT predicate on the "group" field.
func GroupGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldGroup, v))
}

// GroupGTE applies the GTE predicate on the "group" field.
func GroupGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldGroup, v))
}

// GroupLT applies the LT predicate on the "group" field.
func GroupLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldGroup, v))
}

// GroupLTE applies the LTE predicate on the "group" field.
func GroupLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldGroup, v))
}

// GroupContains applies the Contains predicate on the "group" field.
func GroupContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldGroup, v))
}

// GroupHasPrefix applies the HasPrefix predicate on the "group" field.
func GroupHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldGroup, v))
}

// GroupHasSuffix applies the HasSuffix predicate on the "group" field.
func GroupHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldGroup, v))
}

// GroupEqualFold applies the EqualFold predicate on the "group" field.
func GroupEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldGroup, v))
}

// GroupContainsFold applies the ContainsFold predicate on the "group" field.
func GroupContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldGroup, v))
}

// CorpsEQ applies the EQ predicate on the "corps" field.
func CorpsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCorps, v))
}

// CorpsNEQ applies the NEQ predicate on the "corps" field.
func CorpsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCorps, v))
}

// CorpsIn applies the In predicate on the "corps" field.
func CorpsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCorps, vs...))
}

// CorpsNotIn applies the NotIn predicate on the "corps" field.
func CorpsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCorps, vs...))
}

// CorpsGT applies the GT predicate on the "corps" field.
func CorpsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCorps, v))
}

// CorpsGTE applies the GTE predicate on the "corps" field.
func CorpsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCorps, v))
}

// CorpsLT applies the LT predicate on the "corps" field.
func CorpsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCorps, v))
}

// CorpsLTE applies the LTE predicate on the "corps" field.
func CorpsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCorps, v))
}

// CorpsContains applies the Contains predicate on the "corps" field.
func CorpsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldCorps, v))
}

// CorpsHasPrefix applies the HasPrefix predicate on the "corps" field.
func CorpsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldCorps, v))
}

// CorpsHasSuffix applies the HasSuffix predicate on the "corps" field.
func CorpsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldCorps, v))
}

// CorpsIsNil applies the IsNil predicate on the "corps" field.
func CorpsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCorps))
}

// CorpsNotNil applies the NotNil predicate on the "corps" field.
func CorpsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCorps))
}

// CorpsEqualFold applies the EqualFold predicate on the "corps" field.
func CorpsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldCorps, v))
}

// CorpsContainsFold applies the ContainsFold predicate on the "corps" field.
func CorpsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldCorps, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldGender))
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldGender, v))
}

// GenerationEQ applies the EQ predicate on the "generation" field.
func GenerationEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldGeneration, v))
}

// GenerationNEQ applies the NEQ predicate on the "generation" field.
func GenerationNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldGeneration, v))
}

// GenerationIn applies the In predicate on the "generation" field.
func GenerationIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldGeneration, vs...))
}

// GenerationNotIn applies the NotIn predicate on the "generation" field.
func GenerationNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldGeneration, vs...))
}

// GenerationGT applies the GT predicate on the "generation" field.
func GenerationGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldGeneration, v))
}

// GenerationGTE applies the GTE predicate on the "generation" field.
func GenerationGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldGeneration, v))
}

// GenerationLT applies the LT predicate on the "generation" field.
func GenerationLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldGeneration, v))
}

// GenerationLTE applies the LTE predicate on the "generation" field.
func GenerationLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldGeneration, v))
}

// GenerationContains applies the Contains predicate on the "generation" field.
func GenerationContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldGeneration, v))
}

// GenerationHasPrefix applies the HasPrefix predicate on the "generation" field.
func GenerationHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldGeneration, v))
}

// GenerationHasSuffix applies the HasSuffix predicate on the "generation" field.
func GenerationHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldGeneration, v))
}

// GenerationIsNil applies the IsNil predicate on the "generation" field.
func GenerationIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldGeneration))
}

// GenerationNotNil applies the NotNil predicate on the "generation" field.
func GenerationNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldGeneration))
}

// GenerationEqualFold applies the EqualFold predicate on the "generation" field.
func GenerationEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldGeneration, v))
}

// GenerationContainsFold applies the ContainsFold predicate on the "generation" field.
func GenerationContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldGeneration, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldRegion, v))
}

// RegisteredAtEQ applies the EQ predicate on the "registered_at" field.
func RegisteredAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegisteredAt, v))
}

// RegisteredAtNEQ applies the NEQ predicate on the "registered_at" field.
func RegisteredAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegisteredAt, v))
}

// RegisteredAtIn applies the In predicate on the "registered_at" field.
func RegisteredAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegisteredAt, vs...))
}

// RegisteredAtNotIn applies the NotIn predicate on the "registered_at" field.
func RegisteredAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegisteredAt, vs...))
}

// RegisteredAtGT applies the GT predicate on the "registered_at" field.
func RegisteredAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRegisteredAt, v))
}

// RegisteredAtGTE applies the GTE predicate on the "registered_at" field.
func RegisteredAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRegisteredAt, v))
}

// RegisteredAtLT applies the LT predicate on the "registered_at" field.
func RegisteredAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRegisteredAt, v))
}

// RegisteredAtLTE applies the LTE predicate on the "registered_at" field.
func RegisteredAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRegisteredAt, v))
}

// RegisteredAtIsNil applies the IsNil predicate on the "registered_at" field.
func RegisteredAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegisteredAt))
}

// RegisteredAtNotNil applies the NotNil predicate on the "registered_at" field.
func RegisteredAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegisteredAt))
}

// HasTaskRecord applies the HasEdge predicate on the "task_record" edge.
func HasTaskRecord() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TaskRecordTable, TaskRecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskRecordWith applies the HasEdge predicate on the "task_record" edge with a given conditions (other predicates).
func HasTaskRecordWith(preds ...predicate.TaskRecord) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newTaskRecordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
