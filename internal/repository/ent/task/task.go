// Code generated by ent, DO NOT EDIT.

package task

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRowNum holds the string denoting the row_num field in the database.
	FieldRowNum = "row_num"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldGroup holds the string denoting the group field in the database.
	FieldGroup = "group"
	// FieldCorps holds the string denoting the corps field in the database.
	FieldCorps = "corps"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldGeneration holds the string denoting the generation field in the database.
	FieldGeneration = "generation"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldRegisteredAt holds the string denoting the registered_at field in the database.
	FieldRegisteredAt = "registered_at"
	// EdgeTaskRecord holds the string denoting the task_record edge name in mutations.
	EdgeTaskRecord = "task_record"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// TaskRecordTable is the table that holds the task_record relation/edge.
	TaskRecordTable = "task_records"
	// TaskRecordInverseTable is the table name for the TaskRecord entity.
	// It exists in this package in order to avoid circular dependency with the "taskrecord" package.
	TaskRecordInverseTable = "task_records"
	// TaskRecordColumn is the table column denoting the task_record relation/edge.
	TaskRecordColumn = "task_task_record"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRowNum,
	FieldName,
	FieldPhone,
	FieldGroup,
	FieldCorps,
	FieldGender,
	FieldGeneration,
	FieldRegion,
	FieldRegisteredAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
)

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRowNum orders the results by the row_num field.
func ByRowNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRowNum, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByGroup orders the results by the group field.
func ByGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroup, opts...).ToFunc()
}

// ByCorps orders the results by the corps field.
func ByCorps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorps, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByGeneration orders the results by the generation field.
func ByGeneration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeneration, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByRegisteredAt orders the results by the registered_at field.
func ByRegisteredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisteredAt, opts...).ToFunc()
}

// ByTaskRecordField orders the results by task_record field.
func ByTaskRecordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskRecordStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskRecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskRecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TaskRecordTable, TaskRecordColumn),
	)
}
