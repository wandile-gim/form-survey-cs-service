// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"form-survey-cs-service/internal/repository/ent/predicate"
	"form-survey-cs-service/internal/repository/ent/task"
	"form-survey-cs-service/internal/repository/ent/tasklog"
	"form-survey-cs-service/internal/repository/ent/taskrecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskRecordUpdate is the builder for updating TaskRecord entities.
type TaskRecordUpdate struct {
	config
	hooks    []Hook
	mutation *TaskRecordMutation
}

// Where appends a list predicates to the TaskRecordUpdate builder.
func (tru *TaskRecordUpdate) Where(ps ...predicate.TaskRecord) *TaskRecordUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetState sets the "state" field.
func (tru *TaskRecordUpdate) SetState(s string) *TaskRecordUpdate {
	tru.mutation.SetState(s)
	return tru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tru *TaskRecordUpdate) SetNillableState(s *string) *TaskRecordUpdate {
	if s != nil {
		tru.SetState(*s)
	}
	return tru
}

// SetRetryCount sets the "retry_count" field.
func (tru *TaskRecordUpdate) SetRetryCount(i int) *TaskRecordUpdate {
	tru.mutation.ResetRetryCount()
	tru.mutation.SetRetryCount(i)
	return tru
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (tru *TaskRecordUpdate) SetNillableRetryCount(i *int) *TaskRecordUpdate {
	if i != nil {
		tru.SetRetryCount(*i)
	}
	return tru
}

// AddRetryCount adds i to the "retry_count" field.
func (tru *TaskRecordUpdate) AddRetryCount(i int) *TaskRecordUpdate {
	tru.mutation.AddRetryCount(i)
	return tru
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (tru *TaskRecordUpdate) SetTaskID(id int) *TaskRecordUpdate {
	tru.mutation.SetTaskID(id)
	return tru
}

// SetTask sets the "task" edge to the Task entity.
func (tru *TaskRecordUpdate) SetTask(t *Task) *TaskRecordUpdate {
	return tru.SetTaskID(t.ID)
}

// AddTaskLogIDs adds the "task_logs" edge to the TaskLog entity by IDs.
func (tru *TaskRecordUpdate) AddTaskLogIDs(ids ...int) *TaskRecordUpdate {
	tru.mutation.AddTaskLogIDs(ids...)
	return tru
}

// AddTaskLogs adds the "task_logs" edges to the TaskLog entity.
func (tru *TaskRecordUpdate) AddTaskLogs(t ...*TaskLog) *TaskRecordUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tru.AddTaskLogIDs(ids...)
}

// Mutation returns the TaskRecordMutation object of the builder.
func (tru *TaskRecordUpdate) Mutation() *TaskRecordMutation {
	return tru.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tru *TaskRecordUpdate) ClearTask() *TaskRecordUpdate {
	tru.mutation.ClearTask()
	return tru
}

// ClearTaskLogs clears all "task_logs" edges to the TaskLog entity.
func (tru *TaskRecordUpdate) ClearTaskLogs() *TaskRecordUpdate {
	tru.mutation.ClearTaskLogs()
	return tru
}

// RemoveTaskLogIDs removes the "task_logs" edge to TaskLog entities by IDs.
func (tru *TaskRecordUpdate) RemoveTaskLogIDs(ids ...int) *TaskRecordUpdate {
	tru.mutation.RemoveTaskLogIDs(ids...)
	return tru
}

// RemoveTaskLogs removes "task_logs" edges to TaskLog entities.
func (tru *TaskRecordUpdate) RemoveTaskLogs(t ...*TaskLog) *TaskRecordUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tru.RemoveTaskLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TaskRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TaskRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TaskRecordUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TaskRecordUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TaskRecordUpdate) check() error {
	if tru.mutation.TaskCleared() && len(tru.mutation.TaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskRecord.task"`)
	}
	return nil
}

func (tru *TaskRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskrecord.Table, taskrecord.Columns, sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.State(); ok {
		_spec.SetField(taskrecord.FieldState, field.TypeString, value)
	}
	if value, ok := tru.mutation.RetryCount(); ok {
		_spec.SetField(taskrecord.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedRetryCount(); ok {
		_spec.AddField(taskrecord.FieldRetryCount, field.TypeInt, value)
	}
	if tru.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   taskrecord.TaskTable,
			Columns: []string{taskrecord.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   taskrecord.TaskTable,
			Columns: []string{taskrecord.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.TaskLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskrecord.TaskLogsTable,
			Columns: taskrecord.TaskLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RemovedTaskLogsIDs(); len(nodes) > 0 && !tru.mutation.TaskLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskrecord.TaskLogsTable,
			Columns: taskrecord.TaskLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TaskLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskrecord.TaskLogsTable,
			Columns: taskrecord.TaskLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TaskRecordUpdateOne is the builder for updating a single TaskRecord entity.
type TaskRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskRecordMutation
}

// SetState sets the "state" field.
func (truo *TaskRecordUpdateOne) SetState(s string) *TaskRecordUpdateOne {
	truo.mutation.SetState(s)
	return truo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (truo *TaskRecordUpdateOne) SetNillableState(s *string) *TaskRecordUpdateOne {
	if s != nil {
		truo.SetState(*s)
	}
	return truo
}

// SetRetryCount sets the "retry_count" field.
func (truo *TaskRecordUpdateOne) SetRetryCount(i int) *TaskRecordUpdateOne {
	truo.mutation.ResetRetryCount()
	truo.mutation.SetRetryCount(i)
	return truo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (truo *TaskRecordUpdateOne) SetNillableRetryCount(i *int) *TaskRecordUpdateOne {
	if i != nil {
		truo.SetRetryCount(*i)
	}
	return truo
}

// AddRetryCount adds i to the "retry_count" field.
func (truo *TaskRecordUpdateOne) AddRetryCount(i int) *TaskRecordUpdateOne {
	truo.mutation.AddRetryCount(i)
	return truo
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (truo *TaskRecordUpdateOne) SetTaskID(id int) *TaskRecordUpdateOne {
	truo.mutation.SetTaskID(id)
	return truo
}

// SetTask sets the "task" edge to the Task entity.
func (truo *TaskRecordUpdateOne) SetTask(t *Task) *TaskRecordUpdateOne {
	return truo.SetTaskID(t.ID)
}

// AddTaskLogIDs adds the "task_logs" edge to the TaskLog entity by IDs.
func (truo *TaskRecordUpdateOne) AddTaskLogIDs(ids ...int) *TaskRecordUpdateOne {
	truo.mutation.AddTaskLogIDs(ids...)
	return truo
}

// AddTaskLogs adds the "task_logs" edges to the TaskLog entity.
func (truo *TaskRecordUpdateOne) AddTaskLogs(t ...*TaskLog) *TaskRecordUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return truo.AddTaskLogIDs(ids...)
}

// Mutation returns the TaskRecordMutation object of the builder.
func (truo *TaskRecordUpdateOne) Mutation() *TaskRecordMutation {
	return truo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (truo *TaskRecordUpdateOne) ClearTask() *TaskRecordUpdateOne {
	truo.mutation.ClearTask()
	return truo
}

// ClearTaskLogs clears all "task_logs" edges to the TaskLog entity.
func (truo *TaskRecordUpdateOne) ClearTaskLogs() *TaskRecordUpdateOne {
	truo.mutation.ClearTaskLogs()
	return truo
}

// RemoveTaskLogIDs removes the "task_logs" edge to TaskLog entities by IDs.
func (truo *TaskRecordUpdateOne) RemoveTaskLogIDs(ids ...int) *TaskRecordUpdateOne {
	truo.mutation.RemoveTaskLogIDs(ids...)
	return truo
}

// RemoveTaskLogs removes "task_logs" edges to TaskLog entities.
func (truo *TaskRecordUpdateOne) RemoveTaskLogs(t ...*TaskLog) *TaskRecordUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return truo.RemoveTaskLogIDs(ids...)
}

// Where appends a list predicates to the TaskRecordUpdate builder.
func (truo *TaskRecordUpdateOne) Where(ps ...predicate.TaskRecord) *TaskRecordUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TaskRecordUpdateOne) Select(field string, fields ...string) *TaskRecordUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TaskRecord entity.
func (truo *TaskRecordUpdateOne) Save(ctx context.Context) (*TaskRecord, error) {
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TaskRecordUpdateOne) SaveX(ctx context.Context) *TaskRecord {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TaskRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TaskRecordUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TaskRecordUpdateOne) check() error {
	if truo.mutation.TaskCleared() && len(truo.mutation.TaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskRecord.task"`)
	}
	return nil
}

func (truo *TaskRecordUpdateOne) sqlSave(ctx context.Context) (_node *TaskRecord, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskrecord.Table, taskrecord.Columns, sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskrecord.FieldID)
		for _, f := range fields {
			if !taskrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.State(); ok {
		_spec.SetField(taskrecord.FieldState, field.TypeString, value)
	}
	if value, ok := truo.mutation.RetryCount(); ok {
		_spec.SetField(taskrecord.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedRetryCount(); ok {
		_spec.AddField(taskrecord.FieldRetryCount, field.TypeInt, value)
	}
	if truo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   taskrecord.TaskTable,
			Columns: []string{taskrecord.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   taskrecord.TaskTable,
			Columns: []string{taskrecord.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.TaskLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskrecord.TaskLogsTable,
			Columns: taskrecord.TaskLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RemovedTaskLogsIDs(); len(nodes) > 0 && !truo.mutation.TaskLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskrecord.TaskLogsTable,
			Columns: taskrecord.TaskLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TaskLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskrecord.TaskLogsTable,
			Columns: taskrecord.TaskLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskRecord{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
