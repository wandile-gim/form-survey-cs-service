// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"form-survey-cs-service/internal/repository/ent/task"
	"form-survey-cs-service/internal/repository/ent/taskrecord"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 업무 타입
	Type string `json:"type,omitempty"`
	// 행 번호
	RowNum int `json:"row_num,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// 전화번호
	Phone string `json:"phone,omitempty"`
	// PayAmount holds the value of the "pay_amount" field.
	PayAmount float64 `json:"pay_amount,omitempty"`
	// PaidAt holds the value of the "paid_at" field.
	PaidAt string `json:"paid_at,omitempty"`
	// 소속
	Group string `json:"group,omitempty"`
	// Corps holds the value of the "corps" field.
	Corps string `json:"corps,omitempty"`
	// Food holds the value of the "food" field.
	Food string `json:"food,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Generation holds the value of the "generation" field.
	Generation string `json:"generation,omitempty"`
	// 지역
	Region string `json:"region,omitempty"`
	// RegisteredAt holds the value of the "registered_at" field.
	RegisteredAt time.Time `json:"registered_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// TaskRecord holds the value of the task_record edge.
	TaskRecord *TaskRecord `json:"task_record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaskRecordOrErr returns the TaskRecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) TaskRecordOrErr() (*TaskRecord, error) {
	if e.TaskRecord != nil {
		return e.TaskRecord, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: taskrecord.Label}
	}
	return nil, &NotLoadedError{edge: "task_record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldPayAmount:
			values[i] = new(sql.NullFloat64)
		case task.FieldID, task.FieldRowNum:
			values[i] = new(sql.NullInt64)
		case task.FieldType, task.FieldName, task.FieldPhone, task.FieldPaidAt, task.FieldGroup, task.FieldCorps, task.FieldFood, task.FieldGender, task.FieldGeneration, task.FieldRegion:
			values[i] = new(sql.NullString)
		case task.FieldRegisteredAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case task.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case task.FieldRowNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field row_num", values[i])
			} else if value.Valid {
				t.RowNum = int(value.Int64)
			}
		case task.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case task.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				t.Phone = value.String
			}
		case task.FieldPayAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_amount", values[i])
			} else if value.Valid {
				t.PayAmount = value.Float64
			}
		case task.FieldPaidAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				t.PaidAt = value.String
			}
		case task.FieldGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group", values[i])
			} else if value.Valid {
				t.Group = value.String
			}
		case task.FieldCorps:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corps", values[i])
			} else if value.Valid {
				t.Corps = value.String
			}
		case task.FieldFood:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field food", values[i])
			} else if value.Valid {
				t.Food = value.String
			}
		case task.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				t.Gender = value.String
			}
		case task.FieldGeneration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field generation", values[i])
			} else if value.Valid {
				t.Generation = value.String
			}
		case task.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				t.Region = value.String
			}
		case task.FieldRegisteredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registered_at", values[i])
			} else if value.Valid {
				t.RegisteredAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTaskRecord queries the "task_record" edge of the Task entity.
func (t *Task) QueryTaskRecord() *TaskRecordQuery {
	return NewTaskClient(t.config).QueryTaskRecord(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("row_num=")
	builder.WriteString(fmt.Sprintf("%v", t.RowNum))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(t.Phone)
	builder.WriteString(", ")
	builder.WriteString("pay_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.PayAmount))
	builder.WriteString(", ")
	builder.WriteString("paid_at=")
	builder.WriteString(t.PaidAt)
	builder.WriteString(", ")
	builder.WriteString("group=")
	builder.WriteString(t.Group)
	builder.WriteString(", ")
	builder.WriteString("corps=")
	builder.WriteString(t.Corps)
	builder.WriteString(", ")
	builder.WriteString("food=")
	builder.WriteString(t.Food)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(t.Gender)
	builder.WriteString(", ")
	builder.WriteString("generation=")
	builder.WriteString(t.Generation)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(t.Region)
	builder.WriteString(", ")
	builder.WriteString("registered_at=")
	builder.WriteString(t.RegisteredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
