// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"form-survey-cs-service/internal/repository/ent/predicate"
	"form-survey-cs-service/internal/repository/ent/tracker"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrackerUpdate is the builder for updating Tracker entities.
type TrackerUpdate struct {
	config
	hooks    []Hook
	mutation *TrackerMutation
}

// Where appends a list predicates to the TrackerUpdate builder.
func (tu *TrackerUpdate) Where(ps ...predicate.Tracker) *TrackerUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetService sets the "service" field.
func (tu *TrackerUpdate) SetService(t tracker.Service) *TrackerUpdate {
	tu.mutation.SetService(t)
	return tu
}

// SetNillableService sets the "service" field if the given value is not nil.
func (tu *TrackerUpdate) SetNillableService(t *tracker.Service) *TrackerUpdate {
	if t != nil {
		tu.SetService(*t)
	}
	return tu
}

// SetLastOne sets the "last_one" field.
func (tu *TrackerUpdate) SetLastOne(t time.Time) *TrackerUpdate {
	tu.mutation.SetLastOne(t)
	return tu
}

// SetNillableLastOne sets the "last_one" field if the given value is not nil.
func (tu *TrackerUpdate) SetNillableLastOne(t *time.Time) *TrackerUpdate {
	if t != nil {
		tu.SetLastOne(*t)
	}
	return tu
}

// SetVersion sets the "version" field.
func (tu *TrackerUpdate) SetVersion(t time.Time) *TrackerUpdate {
	tu.mutation.SetVersion(t)
	return tu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tu *TrackerUpdate) SetNillableVersion(t *time.Time) *TrackerUpdate {
	if t != nil {
		tu.SetVersion(*t)
	}
	return tu
}

// Mutation returns the TrackerMutation object of the builder.
func (tu *TrackerUpdate) Mutation() *TrackerMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrackerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrackerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrackerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrackerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TrackerUpdate) check() error {
	if v, ok := tu.mutation.Service(); ok {
		if err := tracker.ServiceValidator(v); err != nil {
			return &ValidationError{Name: "service", err: fmt.Errorf(`ent: validator failed for field "Tracker.service": %w`, err)}
		}
	}
	return nil
}

func (tu *TrackerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tracker.Table, tracker.Columns, sqlgraph.NewFieldSpec(tracker.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Service(); ok {
		_spec.SetField(tracker.FieldService, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.LastOne(); ok {
		_spec.SetField(tracker.FieldLastOne, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Version(); ok {
		_spec.SetField(tracker.FieldVersion, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tracker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrackerUpdateOne is the builder for updating a single Tracker entity.
type TrackerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrackerMutation
}

// SetService sets the "service" field.
func (tuo *TrackerUpdateOne) SetService(t tracker.Service) *TrackerUpdateOne {
	tuo.mutation.SetService(t)
	return tuo
}

// SetNillableService sets the "service" field if the given value is not nil.
func (tuo *TrackerUpdateOne) SetNillableService(t *tracker.Service) *TrackerUpdateOne {
	if t != nil {
		tuo.SetService(*t)
	}
	return tuo
}

// SetLastOne sets the "last_one" field.
func (tuo *TrackerUpdateOne) SetLastOne(t time.Time) *TrackerUpdateOne {
	tuo.mutation.SetLastOne(t)
	return tuo
}

// SetNillableLastOne sets the "last_one" field if the given value is not nil.
func (tuo *TrackerUpdateOne) SetNillableLastOne(t *time.Time) *TrackerUpdateOne {
	if t != nil {
		tuo.SetLastOne(*t)
	}
	return tuo
}

// SetVersion sets the "version" field.
func (tuo *TrackerUpdateOne) SetVersion(t time.Time) *TrackerUpdateOne {
	tuo.mutation.SetVersion(t)
	return tuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tuo *TrackerUpdateOne) SetNillableVersion(t *time.Time) *TrackerUpdateOne {
	if t != nil {
		tuo.SetVersion(*t)
	}
	return tuo
}

// Mutation returns the TrackerMutation object of the builder.
func (tuo *TrackerUpdateOne) Mutation() *TrackerMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TrackerUpdate builder.
func (tuo *TrackerUpdateOne) Where(ps ...predicate.Tracker) *TrackerUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrackerUpdateOne) Select(field string, fields ...string) *TrackerUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tracker entity.
func (tuo *TrackerUpdateOne) Save(ctx context.Context) (*Tracker, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrackerUpdateOne) SaveX(ctx context.Context) *Tracker {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrackerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrackerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TrackerUpdateOne) check() error {
	if v, ok := tuo.mutation.Service(); ok {
		if err := tracker.ServiceValidator(v); err != nil {
			return &ValidationError{Name: "service", err: fmt.Errorf(`ent: validator failed for field "Tracker.service": %w`, err)}
		}
	}
	return nil
}

func (tuo *TrackerUpdateOne) sqlSave(ctx context.Context) (_node *Tracker, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tracker.Table, tracker.Columns, sqlgraph.NewFieldSpec(tracker.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tracker.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tracker.FieldID)
		for _, f := range fields {
			if !tracker.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tracker.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Service(); ok {
		_spec.SetField(tracker.FieldService, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.LastOne(); ok {
		_spec.SetField(tracker.FieldLastOne, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Version(); ok {
		_spec.SetField(tracker.FieldVersion, field.TypeTime, value)
	}
	_node = &Tracker{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tracker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
