// Code generated by ent, DO NOT EDIT.

package tracker

import (
	"form-survey-cs-service/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tracker {
	return predicate.Tracker(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tracker {
	return predicate.Tracker(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tracker {
	return predicate.Tracker(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tracker {
	return predicate.Tracker(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tracker {
	return predicate.Tracker(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tracker {
	return predicate.Tracker(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tracker {
	return predicate.Tracker(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tracker {
	return predicate.Tracker(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tracker {
	return predicate.Tracker(sql.FieldLTE(FieldID, id))
}

// LastOne applies equality check predicate on the "last_one" field. It's identical to LastOneEQ.
func LastOne(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldEQ(FieldLastOne, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldEQ(FieldVersion, v))
}

// ServiceEQ applies the EQ predicate on the "service" field.
func ServiceEQ(v Service) predicate.Tracker {
	return predicate.Tracker(sql.FieldEQ(FieldService, v))
}

// ServiceNEQ applies the NEQ predicate on the "service" field.
func ServiceNEQ(v Service) predicate.Tracker {
	return predicate.Tracker(sql.FieldNEQ(FieldService, v))
}

// ServiceIn applies the In predicate on the "service" field.
func ServiceIn(vs ...Service) predicate.Tracker {
	return predicate.Tracker(sql.FieldIn(FieldService, vs...))
}

// ServiceNotIn applies the NotIn predicate on the "service" field.
func ServiceNotIn(vs ...Service) predicate.Tracker {
	return predicate.Tracker(sql.FieldNotIn(FieldService, vs...))
}

// LastOneEQ applies the EQ predicate on the "last_one" field.
func LastOneEQ(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldEQ(FieldLastOne, v))
}

// LastOneNEQ applies the NEQ predicate on the "last_one" field.
func LastOneNEQ(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldNEQ(FieldLastOne, v))
}

// LastOneIn applies the In predicate on the "last_one" field.
func LastOneIn(vs ...time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldIn(FieldLastOne, vs...))
}

// LastOneNotIn applies the NotIn predicate on the "last_one" field.
func LastOneNotIn(vs ...time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldNotIn(FieldLastOne, vs...))
}

// LastOneGT applies the GT predicate on the "last_one" field.
func LastOneGT(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldGT(FieldLastOne, v))
}

// LastOneGTE applies the GTE predicate on the "last_one" field.
func LastOneGTE(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldGTE(FieldLastOne, v))
}

// LastOneLT applies the LT predicate on the "last_one" field.
func LastOneLT(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldLT(FieldLastOne, v))
}

// LastOneLTE applies the LTE predicate on the "last_one" field.
func LastOneLTE(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldLTE(FieldLastOne, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v time.Time) predicate.Tracker {
	return predicate.Tracker(sql.FieldLTE(FieldVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tracker) predicate.Tracker {
	return predicate.Tracker(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tracker) predicate.Tracker {
	return predicate.Tracker(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tracker) predicate.Tracker {
	return predicate.Tracker(sql.NotPredicates(p))
}
