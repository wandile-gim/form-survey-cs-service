// Code generated by ent, DO NOT EDIT.

package tracker

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the tracker type in the database.
	Label = "tracker"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldService holds the string denoting the service field in the database.
	FieldService = "service"
	// FieldLastOne holds the string denoting the last_one field in the database.
	FieldLastOne = "last_one"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// Table holds the table name of the tracker in the database.
	Table = "trackers"
)

// Columns holds all SQL columns for tracker fields.
var Columns = []string{
	FieldID,
	FieldService,
	FieldLastOne,
	FieldVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Service defines the type for the "service" enum field.
type Service string

// ServiceMEMBER is the default value of the Service enum.
const DefaultService = ServiceMEMBER

// Service values.
const (
	ServiceMEMBER Service = "MEMBER"
)

func (s Service) String() string {
	return string(s)
}

// ServiceValidator is a validator for the "service" field enum values. It is called by the builders before save.
func ServiceValidator(s Service) error {
	switch s {
	case ServiceMEMBER:
		return nil
	default:
		return fmt.Errorf("tracker: invalid enum value for service field: %q", s)
	}
}

// OrderOption defines the ordering options for the Tracker queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByService orders the results by the service field.
func ByService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldService, opts...).ToFunc()
}

// ByLastOne orders the results by the last_one field.
func ByLastOne(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastOne, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}
